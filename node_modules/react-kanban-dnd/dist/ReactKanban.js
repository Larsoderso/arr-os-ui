"use strict";
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var react_beautiful_dnd_1 = require("react-beautiful-dnd");
var styled_components_1 = require("styled-components");
var Column_1 = require("./Column");
var Container = styled_components_1.default('div')(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n  min-width: 100vw;\n  display: inline-flex;\n"], ["\n  min-width: 100vw;\n  display: inline-flex;\n"])));
// a little function to help us with reordering the result
var reorder = function (list, startIndex, endIndex) {
    var result = list;
    var removed = result.splice(startIndex, 1)[0];
    result.splice(endIndex, 0, removed);
    return result;
};
var ReactKanban = /** @class */ (function (_super) {
    __extends(ReactKanban, _super);
    function ReactKanban() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            columns: _this.props.columns || [],
            ordered: Object.keys(_this.props.columns),
        };
        _this.getColumnIndexById = function (columns, id) {
            return columns.map(function (column) { return column.id; }).indexOf(id);
        };
        _this.handleDrag = function (result) {
            var columns = _this.state.columns;
            var onDragEnd = _this.props.onDragEnd;
            var source = result.source, destination = result.destination;
            // Dropped nowhere
            if (!destination)
                return;
            // Didn't move anywhere - can bail early
            if (result.type === 'COLUMN') {
                var ordered = reorder(_this.state.ordered, source.index, destination.index);
                _this.setState({
                    ordered: ordered,
                });
            }
            else {
                /* tslint:disable-next-line */
                var stillOnSamePlace = source.droppableId === destination.droppableId && source.index === destination.index;
                if (stillOnSamePlace) {
                    return;
                }
                var newColumns = columns.slice();
                var sourceIndex = _this.getColumnIndexById(columns, source.droppableId);
                var destinationIndex = _this.getColumnIndexById(columns, destination.droppableId);
                var newSourceRows = columns[sourceIndex].rows;
                var newDestinationRows = columns[destinationIndex].rows;
                var removed = newSourceRows.splice(source.index, 1)[0];
                newDestinationRows.splice(destination.index, 0, removed);
                newColumns[sourceIndex].rows = newSourceRows;
                newColumns[destinationIndex].rows = newDestinationRows;
                _this.setState({ newColumns: newColumns });
            }
            var dropReason = __assign({ reason: 'DROP' }, result);
            return onDragEnd(dropReason, null);
        };
        return _this;
    }
    ReactKanban.prototype.render = function () {
        var _a = this.props, onDragStart = _a.onDragStart, renderCard = _a.renderCard, columnWrapperStyle = _a.columnWrapperStyle, columnHeaderStyle = _a.columnHeaderStyle, columnStyle = _a.columnStyle, columnTitleStyle = _a.columnTitleStyle, cardWrapperStyle = _a.cardWrapperStyle;
        var _b = this.state, columns = _b.columns, ordered = _b.ordered;
        return (React.createElement(react_beautiful_dnd_1.DragDropContext, { onDragStart: onDragStart, onDragEnd: this.handleDrag },
            React.createElement(react_beautiful_dnd_1.Droppable, { droppableId: "board", isDropDisabled: false, type: "COLUMN", direction: "horizontal" }, function (provided) { return (React.createElement(Container, __assign({ innerRef: provided.innerRef }, provided.droppableProps), ordered.map(function (key, index) { return (React.createElement(Column_1.default, { key: index, index: index, column: columns[key], renderCard: renderCard, columnHeaderStyle: columnHeaderStyle, columnTitleStyle: columnTitleStyle, columnStyle: columnStyle, columnWrapperStyle: columnWrapperStyle, cardWrapperStyle: cardWrapperStyle })); }))); })));
    };
    return ReactKanban;
}(React.Component));
exports.default = ReactKanban;
var templateObject_1;
//# sourceMappingURL=ReactKanban.js.map